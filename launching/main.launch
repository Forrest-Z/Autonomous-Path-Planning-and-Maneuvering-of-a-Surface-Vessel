<?xml version="1.0"?>

<launch>


<arg name="room"                                default="a_full"      />
<arg name="launch_rviz"                         default="true"      />
<arg name="launch_rqt"	                        default="true"      />
<arg name="launch_global_planner"               default="true"      />
<arg name="launch_local_planner"	            default="true"      />

<arg name="launch_map_server"                   default="true"      />
<arg name="launch_costmap"                   	default="true"      />
<arg name="launch_graph_generator"              default="true"      />
<arg name="cfg"                                 default="default"   />
<arg name="load_segments"                       default="false"     />
<arg name="map_name"                            default=""          />

<!-- NODES -->

<!-- Supervisory Controller node -->
<node name="CME" pkg="cme" type="cme_node" respawn="true" output="screen"/>

<!-- Guidance system node -->
<node name="GuidanceSystem" pkg="guidance_system" type="GuidanceSystem.py" respawn="true" output="screen" cwd="node" />

<!-- Motion control system -->
<node name="MotionControlSystem" pkg="motion_control_system" type="motion_control_system.py" respawn="true" output="screen" cwd="node" />

<!-- Reference filter for DP controller -->
<node name="refFilterNode" pkg="dp_controller" type="Reference_filter.py" respawn="true" output="screen"/>

<!-- DP controller node -->
<node name="DPcontrollerNode" pkg="dp_controller" type="DP_PID.py" respawn="true" output="screen"/>

<!-- Thrust allocation node -->
<node name="thrusterAllocationNode" pkg="dp_controller" type="Thruster_allocation.py" respawn="true" output="screen"/>

<!-- Observer node -->
<node name="ObserverNode" pkg="observer" type="observer.py" respawn="true" output="screen">
<param name="lat0" value="63.4391751633" />
<param name="lon0" value="10.4003291867" />
<param name="alt0" value="-2.423" />
</node>

<!-- map server -->
<group if="$(arg launch_map_server)">
  <node pkg="map_server" type="map_server" name="map_server" args="$(find launching)/cfg/maps/$(arg room)/map.yaml"/>
</group>

<!-- Costmap -->
<group if="$(arg launch_costmap)">
	<!-- transform -->
	<node name="TransformNavSyst" pkg="transform" type="transform_node_magnus" respawn="true" output="screen"/>
	<node pkg="tf" type="static_transform_publisher" name="tf1" args="0 0 0 0 0 0 /map /base_link 100" />
	<!-- Publishes the voxel grid to rviz for display. TODO: Not used.
	<node pkg="costmap_2d" type="costmap_2d_markers" name="voxel_visualizer">
	<remap from="voxel_grid" to="costmap/voxel_grid"/>
	</node>
	-->
	<!-- Run the costmap node -->
	<node name="costmap_node" pkg="costmap_2d" type="costmap_2d_node" >
	<!-- Load common costmap config yaml -->
	<rosparam file="$(find launching)/cfg/costmap/costmap_config.yaml" command="load" ns="costmap" />
	</node>
</group>

<!-- Voronoi graph generator -->
<group if="$(arg launch_graph_generator)">
  <group if="$(arg load_segments)">
  <include file="$(find launching)/graph_generator.launch">
    <arg name="cfg" value="$(arg room)" />
    <arg name="custom_graph_path" value="$(find launching)/cfg/graph/$(arg room)/cache/$(arg map_name)" />
  </include>
  </group>
  <group unless="$(arg load_segments)">
  <include file="$(find launching)/graph_generator.launch">
    <arg name="cfg" value="$(arg room)" />
  </include>
  </group>
</group>

<!-- Local planner node -->
<group if="$(arg launch_local_planner)">
	<node name="LocalPlanner" pkg="local_planner" type="local_planner.py" respawn="true" output="screen" cwd="node" />
</group>


<!-- Global planner node -->
<group if="$(arg launch_global_planner)">
<node name="GlobalPlanner" pkg="global_planner" type="global_planner.py" respawn="true" output="screen" cwd="node" />
</group>

<!-- VIZULISATION -->

<!-- rviz -->
<group if="$(arg launch_rviz)">
  <node pkg="rviz" type="rviz" name="rviz" args="-d $(find launching)/cfg/rviz/main.rviz" output="screen"/>
</group>


<!-- Rqt config -->
<group if="$(arg launch_rqt)">
	<node name="rqt_reconfigure" pkg="rqt_reconfigure" type="rqt_reconfigure" />
</group>


<!-- SIMULATOR -->

<!-- Modbus node -->
<node name="modbusServer" pkg="modbus" type="modbus_server.py" respawn="false" output="screen" />
<node name="modbusServerGPS" pkg="modbus" type="modbus_server_gps.py" respawn="false" output="screen" />
<node name="modbusServerVRU" pkg="modbus" type="modbus_server_vru.py" respawn="false" output="screen" /> 



</launch>
